local base64 = {}
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
function base64.dec(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

function base64.enc(data)
    return ((data:gsub('.', function(x) 
        local r,b='',x:byte()
        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
        return r;
    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
        if (#x < 6) then return '' end
        local c=0
        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
        return b:sub(c+1,c+1)
    end)..({ '', '==', '=' })[#data%3+1])
end

local function load_illu(param)
	local string = base64.dec([[]])
	return loadstring(string)()(param)
end

--region dependencies
--region dependency: havoc_menu_1_3_0
--region menu_assert
--- Assert.
--- @param expression boolean
--- @param level number
--- @param message string
--- @vararg string
--- @return void
local function menu_assert(expression, level, message, ...)
	if (not expression) then
		error(string.format(message, ...), level)
	end
end
--endregion

--region menu_map
local menu_map = {
	rage = {"aimbot", "other"},
	aa = {"anti-aimbot angles", "fake lag", "other"},
	legit = {"weapon type", "aimbot", "triggerbot", "other"},
	visuals = {"player esp", "other esp", "colored models", "effects"},
	misc = {"miscellaneous", "settings", "lua", "other"},
	skins = {"weapon skin", "knife options", "glove options"},
	config = {"presets", "lua"},
	players = {"players", "adjustments"},
	lua = {"a", "b"}
}

for tab, containers in pairs(menu_map) do
	menu_map[tab] = {}

	for i=1, #containers do
		menu_map[tab][containers[i]] = true
	end
end
--endregion

--region menu_item
--- @class menu_item_c
--- @field public tab string
--- @field public container string
--- @field public name string
--- @field public reference number
--- @field public visible boolean
--- @field public hidden_value any
--- @field public children table<number, menu_item_c>
--- @field public ui_callback function
--- @field public getter table
--- @field public setter table
--- @field public parent_value_or_callback any|function
local menu_item_c = {}

local menu_item_mt = {
	__index = menu_item_c
}

--- @param item menu_item_c
--- @vararg any
--- @return menu_item_c|any
function menu_item_mt.__call(item, ...)
	local args = {...}

	if (#args == 0) then
		return item:get()
	end

	local do_ui_set = {pcall(item.set, item, unpack(args))}

	menu_assert(do_ui_set[1], 4, do_ui_set[2])

	return item
end

--- Create a new menu_item_c.
--- @param element function
--- @param tab string
--- @param container string
--- @param name string
--- @vararg any
--- @return menu_item_c
function menu_item_c.new(element, tab, container, name, ...)
	local reference
	local is_menu_reference = false

	if ((type(element)) == "function") then
		local do_ui_new = { pcall(element, tab, container, name, ...)}

		menu_assert(do_ui_new[1], 4, "Cannot create menu item because: %s", do_ui_new[2])

		reference = do_ui_new[2]
	else
		reference = element
		is_menu_reference = true
	end

	return setmetatable(
		{
			tab = tab,
			container = container,
			name = name,
			reference = reference,
			visible = true,
			hidden_value = nil,
			children = {},
			ui_callback = nil,
			callbacks = {},
			is_menu_reference = is_menu_reference,
			getter = {
				callback = nil,
				data = nil
			},
			setter = {
				callback = nil,
				data = nil
			},
			parent_value_or_callback = nil
		},
		menu_item_mt
	)
end

--- @param value any
--- @return void
function menu_item_c:set_hidden_value(value)
	self.hidden_value = value
end

--- @vararg any
--- @return void
function menu_item_c:set(...)
	local args = {...}

	if (self.setter.callback ~= nil) then
		args = self.setter.callback(unpack(args))
	end

	local do_ui_set = {pcall(ui.set, self.reference, unpack(args))}

	menu_assert(do_ui_set[1], 3, "Cannot set values of menu item because: %s", do_ui_set[2])
end

--- @return any
function menu_item_c:get()
	if (self.visible == false and self.hidden_value ~= nil) then
		return self.hidden_value
	end

	local get = {ui.get(self.reference)}

	if (self.getter.callback ~= nil) then
		return self.getter.callback(get)
	end

	return unpack(get)
end

--- @param callback function
--- @param data any
--- @return void
function menu_item_c:set_setter_callback(callback, data)
	menu_assert(type(callback) == "function", 3, "Cannot set menu item setter callback: argument must be a function.")

	self.setter.callback = callback
	self.setter.data = data
end

--- @param callback function
--- @param data any
--- @return void
function menu_item_c:set_getter_callback(callback, data)
	menu_assert(type(callback) == "function", 3, "Cannot set menu item getter callback: argument must be a function.")

	self.getter.callback = callback
	self.getter.data = data
end

--- @param children table<any, menu_item_c>
--- @param value_or_callback function|any
--- @return void
function menu_item_c:add_children(children, value_or_callback)
	if (value_or_callback == nil) then
		value_or_callback = true
	end

	if (getmetatable(children) == menu_item_mt) then
		children = {children}
	end

	for _, child in pairs(children) do
		menu_assert(getmetatable(child) == menu_item_mt, 3, "Cannot add child to menu item: children must be menu item objects. Make sure you are not trying to parent a UI reference.")
		menu_assert(child.reference ~= self.reference, 3, "Cannot parent a menu item to iself.")

		child.parent_value_or_callback = value_or_callback
		self.children[child.reference] = child
	end

	menu_item_c._process_callbacks(self)
end

--- @param callback function
--- @return void
function menu_item_c:add_callback(callback)
	menu_assert(self.is_menu_reference == false, 3, "Cannot add callbacks to built-in menu items.")
	menu_assert(type(callback) == "function", 3, "Callbacks for menu items must be functions.")

	table.insert(self.callbacks, callback)

	menu_item_c._process_callbacks(self)
end

--- @param item menu_item_c
--- @return void
function menu_item_c._process_callbacks(item)
	local callback = function()
		for _, child in pairs(item.children) do
			local is_child_visible

			if (type(child.parent_value_or_callback) == "function") then
				is_child_visible = child.parent_value_or_callback()
			else
				is_child_visible = item:get() == child.parent_value_or_callback
			end

			local is_visible = (is_child_visible == true) and (item.visible == true)
			child.visible = is_visible

			ui.set_visible(child.reference, is_visible)

			if (child.ui_callback ~= nil) then
				child.ui_callback()
			end
		end

		for i = 1, #item.callbacks do
			item.callbacks[i]()
		end
	end

	ui.set_callback(item.reference, callback)
	item.ui_callback = callback

	callback()
end
--endregion

--region menu_manager
--- @class menu_manager_c
--- @field public tab string
--- @field public container string
--- @field public children table<number, menu_item_c>
local menu_manager_c = {}

local menu_manager_mt = {
	__index = menu_manager_c
}

--- Create a new menu_manager_c.
--- @param tab string
--- @param container string
--- @return menu_manager_c
function menu_manager_c.new(tab, container)
	menu_manager_c._validate_tab_container(tab, container)

	return setmetatable(
		{
			tab = tab,
			container = container,
			children = {}
		},
		menu_manager_mt
	)
end

--- Saves the values for menu items currently created to the database.
--- @return void
function menu_manager_c:save_to_db()
	local prefix = string.format("%s_%s", self.tab, self.container)

	for _, item in pairs(self.children) do
		local key = string.format("%s_%s", prefix, item.name)
		local data = {item()}

		database.write(key, data)
	end
end

--- Loads the values for menu items currently created from to the database.
--- @return void
function menu_manager_c:load_from_db()
	local prefix = string.format("%s_%s", self.tab, self.container)

	for _, item in pairs(self.children) do
		local key = string.format("%s_%s", prefix, item.name)
		local data = database.read(key)

		if (data ~= nil) then
			item(unpack(data))
		end
	end
end

--- @param item menu_item_c
--- @param value_or_callback function|any
--- @return void
function menu_manager_c:parent_all_to(item, value_or_callback)
	local children = self.children

	children[item.reference] = nil

	item:add_children(children, value_or_callback)
end

--- @param tab string
--- @param container string
--- @param name string
--- @return menu_item_c
function menu_manager_c.reference(tab, container, name)
	menu_manager_c._validate_tab_container(tab, container)

	local do_reference = {pcall(ui.reference, tab, container, name)}

	menu_assert(do_reference[1], 3, "Cannot reference Gamesense menu item because: %s", do_reference[2])

	local references = {select(2, unpack(do_reference))}
	local items = {}

	for i = 1, #references do
		table.insert(
			items,
			menu_item_c.new(
				references[i],
				tab,
				container,
				name
			)
		)
	end

	return unpack(items)
end

--- @param name string
--- @return menu_item_c
function menu_manager_c:checkbox(name)
	return self:_create_item(ui.new_checkbox, name)
end

--- @param name string
--- @param min number
--- @param max number
--- @param default_or_options number|table<any, any>
--- @return menu_item_c
function menu_manager_c:slider(name, min, max, default_or_options, show_tooltip, unit, scale, tooltips)
	if (type(default_or_options) == "table") then
		local options = default_or_options

		default_or_options = options.default
		show_tooltip = options.show_tooltip
		unit = options.unit
		scale = options.scale
		tooltips = options.tooltips
	end

	default_or_options = default_or_options or nil
	show_tooltip = show_tooltip or true
	unit = unit or nil
	scale = scale or 1
	tooltips = tooltips or nil

	menu_assert(type(min) == "number", 3, "Slider min value must be a number.")
	menu_assert(type(max) == "number", 3, "Slider max value must be a number.")
	menu_assert(min < max, 3, "Slider min value must be below the max value.")

	if (default_or_options ~= nil) then
		menu_assert(default_or_options >= min and default_or_options <= max, 3, "Slider default must be between min and max values.")
	end

	return self:_create_item(ui.new_slider, name, min, max, default_or_options, show_tooltip, unit, scale, tooltips)
end

--- @param name string
--- @vararg string
--- @return menu_item_c
function menu_manager_c:combobox(name, ...)
	local args = {...}

	if (type(args[1]) == "table") then
		args = args[1]
	end

	return self:_create_item(ui.new_combobox, name, args)
end

--- @param name string
--- @vararg string
--- @return menu_item_c
function menu_manager_c:multiselect(name, ...)
	local args = {...}

	if (type(args[1]) == "table") then
		args = args[1]
	end

	return self:_create_item(ui.new_multiselect, name, args)
end

--- @param name string
--- @param inline boolean
--- @return menu_item_c
function menu_manager_c:hotkey(name, inline)
	if (inline == nil) then
		inline = false
	end

	menu_assert(type(inline) == "boolean", 3, "Hotkey inline argument must be a boolean.")

	return self:_create_item(ui.new_hotkey, name, inline)
end

--- @param name string
--- @param callback function
--- @return menu_item_c
function menu_manager_c:button(name, callback)
	menu_assert(type(callback) == "function", 3, "Cannot set button callback because the callback argument must be a function.")

	return self:_create_item(ui.new_button, name, callback)
end

--- @param name string
--- @param r number
--- @param g number
--- @param b number
--- @param a number
--- @return menu_item_c
function menu_manager_c:color_picker(name, r, g, b, a)
	r = r or 255
	g = g or 255
	b = b or 255
	a = a or 255

	menu_assert(type(r) == "number" and r >= 0 and r <= 255, 3, "Cannot set color picker red channel value. It must be between 0 and 255.")
	menu_assert(type(g) == "number" and g >= 0 and g <= 255, 3, "Cannot set color picker green channel value. It must be between 0 and 255.")
	menu_assert(type(b) == "number" and b >= 0 and b <= 255, 3, "Cannot set color picker blue channel value. It must be between 0 and 255.")
	menu_assert(type(a) == "number" and a >= 0 and a <= 255, 3, "Cannot set color picker alpha channel value. It must be between 0 and 255.")

	return self:_create_item(ui.new_color_picker, name, r, g, b, a)
end

--- @param name string
--- @return menu_item_c
function menu_manager_c:textbox(name)
	return self:_create_item(ui.new_textbox, name)
end

--- @param name string
--- @vararg string
--- @return menu_item_c
function menu_manager_c:listbox(name, ...)
	local args = {...}

	if (type(args[1]) == "table") then
		args = args[1]
	end

	local item = self:_create_item(ui.new_listbox, name, args)

	item:set_getter_callback(
		function(get)
			return item.getter.data[get + 1]
		end,
		args
	)

	return item
end

--- @param name string
--- @return menu_item_c
function menu_manager_c:label(name)
	menu_assert(type(name) == "string", "Label name must be a string.")

	return self:_create_item(ui.new_label, name)
end

--- @param element function
--- @param name string
--- @vararg any
--- @return menu_item_c
function menu_manager_c:_create_item(element, name, ...)
	menu_assert(type(name) == "string" and name ~= "", 3, "Cannot create menu item: name must be a non-empty string.")

	local item = menu_item_c.new(element, self.tab, self.container, name, ...)
	self.children[item.reference] = item

	return item
end

--- @param tab string
--- @param container string
--- @return void
function menu_manager_c._validate_tab_container(tab, container)
	menu_assert(type(tab) == "string" and tab ~= "", 4, "Cannot create menu manager: tab name must be a non-empty string.")
	menu_assert(type(container) == "string" and container ~= "", 4, "Cannot create menu manager: tab name must be a non-empty string.")

	tab = tab:lower()

	menu_assert(menu_map[tab] ~= nil, 4, "Cannot create menu manager: tab name does not exist.")
	menu_assert(menu_map[tab][container:lower()] ~= nil, 4, "Cannot create menu manager: container name does not exist.")
end
--endregion
--endregion

--region dependency: havoc_binary_1_0_0
--- @class bin_c
--- @field public hex string
--- @field public bin string
--- @field public exe function
--- @field public byte_count number
--- @field public suffixes_short table<number, string>
--- @field public suffixes_long table<number, string>
local bin_c = {}
local bin_mt = {
	__index = bin_c,
	--- @param bin bin_c
	--- @vararg any
	__call = function(bin, ...)
		if (bin.is_executable == true) then
			pcall(bin.exe(), ...)
		else
			return bin.bin
		end
	end
}

--- Instantiate an object of bytecode_c.
--- @param hex string
--- @param is_executable boolean
--- @return bin_c
function bin_c.new(hex, is_executable, format)
	return setmetatable({
		hex = hex,
		bin = nil,
		exe = nil,
		byte_count = nil,
		suffixes_short = { "B", "KB", "MB", "GB", "TB" },
		suffixes_long = { "bytes", "kilobytes", "megabytes", "gigabytes", "terabytes" },
		is_executable = is_executable or false
	}, bin_mt):init(format)
end

--- bytecode_c constructor method.
--- @param format boolean
--- @return bin_c
function bin_c:init(format)
	self.bin = type(format) ~= "number" and self:to_bin(self.hex) or self:to_binf(self.hex, format)
	self.byte_count = self.bin:len()

	if (self.is_executable) then
		local exe, err = loadstring(self.bin)

		assert(err == nil, string.format("Could not load binary: %s", err))

		self.exe = exe
	end

	return self
end

--- Returns the size of the binary data. If precision is nil an integer is returned, else a formatted string.
--- @param precision number|nil
--- @return string|number
function bin_c:size(precision, long_suffix_name)
	if (precision == nil) then
		return self.byte_count
	end

	local base = math.log(self.byte_count, 10) / math.log(1024, 10)
	local size = 1024 ^ (base - math.floor(base))
	local rounded = 10 ^ (precision or 0)

	size = math.floor(size * rounded + 0.5) / rounded

	local suffixes = self.suffixes_short

	if (long_suffix_name == true) then
		suffixes = self.suffixes_long
	end

	return string.format("%s %s", size, suffixes[math.floor(base) + 1])
end

--- Convert hex to binary data.
--- @return string
function bin_c:to_bin(hex)
	return (hex:gsub('..', function (cc)
		return string.char(tonumber(cc, 16))
	end))
end

--- Convert hex to binary data.
--- @param hex string
--- @param format number
--- @return string
function bin_c:to_binf(hex, format)
	local i = 1

	return (hex:gsub('..', function (cc)
		local byte

		if (i % format == 0) then
			byte = 255 - tonumber(cc, 16)
		else
			byte = tonumber(cc, 16)
		end

		i = i + 1

		return string.char(byte)
	end))
end

--- Convert binary to hex string.
--- @return string
function bin_c:to_hex()
	return (self.bin:gsub('.', function (c)
		return string.format('%02X', string.byte(c))
	end))
end
--endregion
--endregion

--region illusion
local illusion = load_illu("havoc weather")
--endregion

--region orb_manager
--- @class orb_manager_c
--- @field public orb illusion_particle_c
--- @field public shader shader_c
--- @field public rainbow boolean
--- @field public rainbow_speed number
--- @field public radius number
--- @field public orbit_height number
--- @field public trail_fade_time number
local orb_manager_c = {}
local orb_manager_mt = { __index = orb_manager_c }

--- Instantiate an object of orb_manager_c.
--- @return orb_manager_c
function orb_manager_c.new()
	return setmetatable({
		orb = nil,
		shader = illusion.shader.rgb(255, 255, 150, 255),
		rainbow = false,
		rainbow_speed = 1,
		radius = 30,
		orbit_height = 32,
		trail_fade_time = 1
	}, orb_manager_mt)
end

--- Spawn the orb.
--- @return void
function orb_manager_c:spawn_orb()
	if (self.orb ~= nil and self.orb.dead == false) then
		return
	end

	local orb = illusion:create()

	orb.type = "circle"
	orb.origin = illusion.shared.player_origin:clone_offset()
	orb.radius = self.radius
	orb.shader = self.shader
	orb.animator = illusion.animator(orb)
	orb.skip_offscreen = false

	orb.on_dead = function()
		self.orb = nil
	end

	orb.on_frame = function()
		if (self.rainbow == true) then
			orb.shader:shift_hue(self.rainbow_speed * illusion.simulation.delta)
		end

		orb.animator:orbit_easing(
			illusion.shared.player_origin:clone_offset(0, 0, self.orbit_height),
			4, 0.005, 64,
			{
				speed = 1.25,
				traces = 64,
				collision = true,
				ignore = illusion.shared.player_eid
			}
		)

		orb.animator:float_z(0.5, 1)

		if (self.trail_fade_time > 0) then
			local trail = illusion:create()
			local trail_shader = orb.shader:clone()

			trail_shader.a = 5

			trail.type = "circle"
			trail.origin = orb.origin:clone()
			trail.radius = orb.radius
			trail.shader = trail_shader
			trail.lifespan = 0
			trail.fade_time = self.trail_fade_time
			trail.skip_offscreen = true

			trail.on_frame = function()
				trail.radius = trail.radius + 1 * illusion.simulation.delta
			end
		end
	end

	self.orb = orb
end

function orb_manager_c:kill_orb()
	if (self.orb ~= nil) then
		self.orb.dead = true
		self.orb = nil
	end
end
--endregion

--region setup
local orb_manager = orb_manager_c.new()
--endregion

--region menu
local menu = menu_manager_c.new("config", "presets")

menu:label("--------------------------------------------------")
menu:label("Havoc Orb Pet - v1.0.3-beta")

local enable_script = menu:checkbox("Enable script")

enable_script:add_callback(function()
	orb_manager:kill_orb()
end)

local orb_color = menu:color_picker("Orb color", 255, 255, 150, 255)

orb_color:add_callback(function()
	local r, g, b, a = orb_color()

	orb_manager.shader(r, g, b, a)
end)

local orb_rainbow = menu:checkbox("Orb rainbow")

orb_rainbow:add_callback(function()
	orb_manager.rainbow = orb_rainbow()
end)

local orb_rainbow_speed = menu:slider("Rainbow speed", 1, 10, {
	unit = "x"
})

orb_rainbow_speed:add_callback(function()
	orb_manager.rainbow_speed = orb_rainbow_speed() * 0.05
end)

local orb_radius = menu:slider("Orb radius", 10, 40, {
	default = 30,
	unit = "x"
})

orb_radius:add_callback(function()
	orb_manager.radius = orb_radius()

	orb_manager:kill_orb()
end)

local orb_trail_fade_time = menu:slider("Orb trail fade speed", 0, 20, {
	default = 5,
	unit = "s",
	scale = 0.1
})

orb_trail_fade_time:add_callback(function()
	orb_manager.trail_fade_time = orb_trail_fade_time() * 0.1
end)

enable_script:add_children({
	orb_color,
	orb_rainbow,
	orb_rainbow_speed,
	orb_radius,
	orb_trail_fade_time
})

menu:load_from_db()
--endregion

--region main
client.set_event_callback("paint", function()
	if (illusion:available() == false or enable_script() == false) then
		return
	end

	orb_manager:spawn_orb()
end)

client.set_event_callback("player_spawn", function(data)
	if (entity.get_local_player() ~= client.userid_to_entindex(data.userid)) then
		return
	end

	if (illusion:available() == true and enable_script() == true) then
		orb_manager:kill_orb()
	end
end)

client.set_event_callback("shutdown", function()
	menu:save_to_db()
end)
--endregion

--region dependencies
--- Convert hex to binary data.
--- @return string
local function hex_to_bin(hex)
	return (hex:gsub('..', function (cc)
		return string.char(tonumber(cc, 16))
	end))
end

--region dependency: havoc_menu_1_3_0
--region menu_assert
--- Assert.
--- @param expression boolean
--- @param level number
--- @param message string
--- @vararg string
--- @return void
local function menu_assert(expression, level, message, ...)
	if (not expression) then
		error(string.format(message, ...), level)
	end
end
--endregion

--region menu_map
local menu_map = {
	rage = {"aimbot", "other"},
	aa = {"anti-aimbot angles", "fake lag", "other"},
	legit = {"weapon type", "aimbot", "triggerbot", "other"},
	visuals = {"player esp", "other esp", "colored models", "effects"},
	misc = {"miscellaneous", "settings", "lua", "other"},
	skins = {"weapon skin", "knife options", "glove options"},
	config = {"presets", "lua"},
	players = {"players", "adjustments"},
	lua = {"a", "b"}
}

for tab, containers in pairs(menu_map) do
	menu_map[tab] = {}

	for i=1, #containers do
		menu_map[tab][containers[i]] = true
	end
end
--endregion

--region menu_item
--- @class menu_item_c
--- @field public tab string
--- @field public container string
--- @field public name string
--- @field public reference number
--- @field public visible boolean
--- @field public hidden_value any
--- @field public children table<number, menu_item_c>
--- @field public ui_callback function
--- @field public getter table
--- @field public setter table
--- @field public parent_value_or_callback any|function
local menu_item_c = {}

local menu_item_mt = {
	__index = menu_item_c
}

--- @param item menu_item_c
--- @vararg any
--- @return menu_item_c|any
function menu_item_mt.__call(item, ...)
	local args = {...}

	if (#args == 0) then
		return item:get()
	end

	local do_ui_set = {pcall(item.set, item, unpack(args))}

	menu_assert(do_ui_set[1], 4, do_ui_set[2])

	return item
end

--- Create a new menu_item_c.
--- @param element function
--- @param tab string
--- @param container string
--- @param name string
--- @vararg any
--- @return menu_item_c
function menu_item_c.new(element, tab, container, name, ...)
	local reference
	local is_menu_reference = false

	if ((type(element)) == "function") then
		local do_ui_new = { pcall(element, tab, container, name, ...)}

		menu_assert(do_ui_new[1], 4, "Cannot create menu item because: %s", do_ui_new[2])

		reference = do_ui_new[2]
	else
		reference = element
		is_menu_reference = true
	end

	return setmetatable(
		{
			tab = tab,
			container = container,
			name = name,
			reference = reference,
			visible = true,
			hidden_value = nil,
			children = {},
			ui_callback = nil,
			callbacks = {},
			is_menu_reference = is_menu_reference,
			getter = {
				callback = nil,
				data = nil
			},
			setter = {
				callback = nil,
				data = nil
			},
			parent_value_or_callback = nil
		},
		menu_item_mt
	)
end

--- @param value any
--- @return void
function menu_item_c:set_hidden_value(value)
	self.hidden_value = value
end

--- @vararg any
--- @return void
function menu_item_c:set(...)
	local args = {...}

	if (self.setter.callback ~= nil) then
		args = self.setter.callback(unpack(args))
	end

	local do_ui_set = {pcall(ui.set, self.reference, unpack(args))}

	menu_assert(do_ui_set[1], 3, "Cannot set values of menu item because: %s", do_ui_set[2])
end

--- @return any
function menu_item_c:get()
	if (self.visible == false and self.hidden_value ~= nil) then
		return self.hidden_value
	end

	local get = {ui.get(self.reference)}

	if (self.getter.callback ~= nil) then
		return self.getter.callback(get)
	end

	return unpack(get)
end

--- @param callback function
--- @param data any
--- @return void
function menu_item_c:set_setter_callback(callback, data)
	menu_assert(type(callback) == "function", 3, "Cannot set menu item setter callback: argument must be a function.")

	self.setter.callback = callback
	self.setter.data = data
end

--- @param callback function
--- @param data any
--- @return void
function menu_item_c:set_getter_callback(callback, data)
	menu_assert(type(callback) == "function", 3, "Cannot set menu item getter callback: argument must be a function.")

	self.getter.callback = callback
	self.getter.data = data
end

--- @param children table<any, menu_item_c>
--- @param value_or_callback function|any
--- @return void
function menu_item_c:add_children(children, value_or_callback)
	if (value_or_callback == nil) then
		value_or_callback = true
	end

	if (getmetatable(children) == menu_item_mt) then
		children = {children}
	end

	for _, child in pairs(children) do
		menu_assert(getmetatable(child) == menu_item_mt, 3, "Cannot add child to menu item: children must be menu item objects. Make sure you are not trying to parent a UI reference.")
		menu_assert(child.reference ~= self.reference, 3, "Cannot parent a menu item to iself.")

		child.parent_value_or_callback = value_or_callback
		self.children[child.reference] = child
	end

	menu_item_c._process_callbacks(self)
end

--- @param callback function
--- @return void
function menu_item_c:add_callback(callback)
	menu_assert(self.is_menu_reference == false, 3, "Cannot add callbacks to built-in menu items.")
	menu_assert(type(callback) == "function", 3, "Callbacks for menu items must be functions.")

	table.insert(self.callbacks, callback)

	menu_item_c._process_callbacks(self)
end

--- @param item menu_item_c
--- @return void
function menu_item_c._process_callbacks(item)
	local callback = function()
		for _, child in pairs(item.children) do
			local is_child_visible

			if (type(child.parent_value_or_callback) == "function") then
				is_child_visible = child.parent_value_or_callback()
			else
				is_child_visible = item:get() == child.parent_value_or_callback
			end

			local is_visible = (is_child_visible == true) and (item.visible == true)
			child.visible = is_visible

			ui.set_visible(child.reference, is_visible)

			if (child.ui_callback ~= nil) then
				child.ui_callback()
			end
		end

		for i = 1, #item.callbacks do
			item.callbacks[i]()
		end
	end

	ui.set_callback(item.reference, callback)
	item.ui_callback = callback

	callback()
end
--endregion

--region menu_manager
--- @class menu_manager_c
--- @field public tab string
--- @field public container string
--- @field public children table<number, menu_item_c>
local menu_manager_c = {}

local menu_manager_mt = {
	__index = menu_manager_c
}

--- Create a new menu_manager_c.
--- @param tab string
--- @param container string
--- @return menu_manager_c
function menu_manager_c.new(tab, container)
	menu_manager_c._validate_tab_container(tab, container)

	return setmetatable(
		{
			tab = tab,
			container = container,
			children = {}
		},
		menu_manager_mt
	)
end

--- Saves the values for menu items currently created to the database.
--- @return void
function menu_manager_c:save_to_db()
	local prefix = string.format("%s_%s", self.tab, self.container)

	for _, item in pairs(self.children) do
		local key = string.format("%s_%s", prefix, item.name)
		local data = {item()}

		database.write(key, data)
	end
end

--- Loads the values for menu items currently created from to the database.
--- @return void
function menu_manager_c:load_from_db()
	local prefix = string.format("%s_%s", self.tab, self.container)

	for _, item in pairs(self.children) do
		local key = string.format("%s_%s", prefix, item.name)
		local data = database.read(key)

		if (data ~= nil) then
			item(unpack(data))
		end
	end
end

--- @param item menu_item_c
--- @param value_or_callback function|any
--- @return void
function menu_manager_c:parent_all_to(item, value_or_callback)
	local children = self.children

	children[item.reference] = nil

	item:add_children(children, value_or_callback)
end

--- @param tab string
--- @param container string
--- @param name string
--- @return menu_item_c
function menu_manager_c.reference(tab, container, name)
	menu_manager_c._validate_tab_container(tab, container)

	local do_reference = {pcall(ui.reference, tab, container, name)}

	menu_assert(do_reference[1], 3, "Cannot reference Gamesense menu item because: %s", do_reference[2])

	local references = {select(2, unpack(do_reference))}
	local items = {}

	for i = 1, #references do
		table.insert(
			items,
			menu_item_c.new(
				references[i],
				tab,
				container,
				name
			)
		)
	end

	return unpack(items)
end

--- @param name string
--- @return menu_item_c
function menu_manager_c:checkbox(name)
	return self:_create_item(ui.new_checkbox, name)
end

--- @param name string
--- @param min number
--- @param max number
--- @param default_or_options number|table<any, any>
--- @return menu_item_c
function menu_manager_c:slider(name, min, max, default_or_options, show_tooltip, unit, scale, tooltips)
	if (type(default_or_options) == "table") then
		local options = default_or_options

		default_or_options = options.default
		show_tooltip = options.show_tooltip
		unit = options.unit
		scale = options.scale
		tooltips = options.tooltips
	end

	default_or_options = default_or_options or nil
	show_tooltip = show_tooltip or true
	unit = unit or nil
	scale = scale or 1
	tooltips = tooltips or nil

	menu_assert(type(min) == "number", 3, "Slider min value must be a number.")
	menu_assert(type(max) == "number", 3, "Slider max value must be a number.")
	menu_assert(min < max, 3, "Slider min value must be below the max value.")

	if (default_or_options ~= nil) then
		menu_assert(default_or_options >= min and default_or_options <= max, 3, "Slider default must be between min and max values.")
	end

	return self:_create_item(ui.new_slider, name, min, max, default_or_options, show_tooltip, unit, scale, tooltips)
end

--- @param name string
--- @vararg string
--- @return menu_item_c
function menu_manager_c:combobox(name, ...)
	local args = {...}

	if (type(args[1]) == "table") then
		args = args[1]
	end

	return self:_create_item(ui.new_combobox, name, args)
end

--- @param name string
--- @vararg string
--- @return menu_item_c
function menu_manager_c:multiselect(name, ...)
	local args = {...}

	if (type(args[1]) == "table") then
		args = args[1]
	end

	return self:_create_item(ui.new_multiselect, name, args)
end

--- @param name string
--- @param inline boolean
--- @return menu_item_c
function menu_manager_c:hotkey(name, inline)
	if (inline == nil) then
		inline = false
	end

	menu_assert(type(inline) == "boolean", 3, "Hotkey inline argument must be a boolean.")

	return self:_create_item(ui.new_hotkey, name, inline)
end

--- @param name string
--- @param callback function
--- @return menu_item_c
function menu_manager_c:button(name, callback)
	menu_assert(type(callback) == "function", 3, "Cannot set button callback because the callback argument must be a function.")

	return self:_create_item(ui.new_button, name, callback)
end

--- @param name string
--- @param r number
--- @param g number
--- @param b number
--- @param a number
--- @return menu_item_c
function menu_manager_c:color_picker(name, r, g, b, a)
	r = r or 255
	g = g or 255
	b = b or 255
	a = a or 255

	menu_assert(type(r) == "number" and r >= 0 and r <= 255, 3, "Cannot set color picker red channel value. It must be between 0 and 255.")
	menu_assert(type(g) == "number" and g >= 0 and g <= 255, 3, "Cannot set color picker green channel value. It must be between 0 and 255.")
	menu_assert(type(b) == "number" and b >= 0 and b <= 255, 3, "Cannot set color picker blue channel value. It must be between 0 and 255.")
	menu_assert(type(a) == "number" and a >= 0 and a <= 255, 3, "Cannot set color picker alpha channel value. It must be between 0 and 255.")

	return self:_create_item(ui.new_color_picker, name, r, g, b, a)
end

--- @param name string
--- @return menu_item_c
function menu_manager_c:textbox(name)
	return self:_create_item(ui.new_textbox, name)
end

--- @param name string
--- @vararg string
--- @return menu_item_c
function menu_manager_c:listbox(name, ...)
	local args = {...}

	if (type(args[1]) == "table") then
		args = args[1]
	end

	local item = self:_create_item(ui.new_listbox, name, args)

	item:set_getter_callback(
		function(get)
			return item.getter.data[get + 1]
		end,
		args
	)

	return item
end

--- @param name string
--- @return menu_item_c
function menu_manager_c:label(name)
	menu_assert(type(name) == "string", "Label name must be a string.")

	return self:_create_item(ui.new_label, name)
end

--- @param element function
--- @param name string
--- @vararg any
--- @return menu_item_c
function menu_manager_c:_create_item(element, name, ...)
	menu_assert(type(name) == "string" and name ~= "", 3, "Cannot create menu item: name must be a non-empty string.")

	local item = menu_item_c.new(element, self.tab, self.container, name, ...)
	self.children[item.reference] = item

	return item
end

--- @param tab string
--- @param container string
--- @return void
function menu_manager_c._validate_tab_container(tab, container)
	menu_assert(type(tab) == "string" and tab ~= "", 4, "Cannot create menu manager: tab name must be a non-empty string.")
	menu_assert(type(container) == "string" and container ~= "", 4, "Cannot create menu manager: tab name must be a non-empty string.")

	tab = tab:lower()

	menu_assert(menu_map[tab] ~= nil, 4, "Cannot create menu manager: tab name does not exist.")
	menu_assert(menu_map[tab][container:lower()] ~= nil, 4, "Cannot create menu manager: container name does not exist.")
end
--endregion
--endregion
--endregion

--region emmydoc
--- @class weather_mode_c
--- @field public render fun(self: weather_mode_c, boundary_manager: weather_boundary_manager_c): void
--endregion

--region setup

--endregion

--region weather_boundary
--- @class weather_boundary_c
--- @field public sky_z number
--- @field public cull_z number
local weather_boundary_c = {}
local weather_boundary_mt = { __index = weather_boundary_c }

--- Instantiate an object of weather_boundary_c.
--- @return weather_boundary_c
local function weather_boundary(sky_z, cull_z)
	return weather_boundary_c.new(sky_z, cull_z)
end

--- Instantiate an object of weather_boundary_c.
--- @return weather_boundary_c
function weather_boundary_c.new(sky_z)
	return setmetatable({
		sky_z = sky_z
	}, weather_boundary_mt)
end
--endregion

--region weather_boundary_manager
--- @class weather_boundary_manager_c
--- @field public current weather_boundary_c
--- @field public default weather_boundary_c
--- @field public boundaries table<string, weather_boundary_c>
local weather_boundary_manager_c = {}
local weather_boundary_manager_mt = { __index = weather_boundary_manager_c }

--- Instantiate an object of weather_boundary_manager_c.
--- @return weather_boundary_manager_c
function weather_boundary_manager_c.new()
	return setmetatable({
		current = nil,
		default = weather_boundary(1000),
		boundaries = {
			["de_dust2"] = weather_boundary(710),
			["de_mirage"] = weather_boundary(1200),
			["de_mirage_scrimmagemap"] = weather_boundary(1200),
			["de_inferno"] = weather_boundary(570),
			["de_vertigo"] = weather_boundary(12800),
			["de_cbble"] = weather_boundary(1200),
			["de_cache"] = weather_boundary(2400),
			["de_train"] = weather_boundary(1000),
			["de_overpass"] = weather_boundary(1000),
			["de_nuke"] = weather_boundary(700),
			["de_canals"] = weather_boundary(1000),
			["cs_agency"] = weather_boundary(1000),
			["cs_office"] = weather_boundary(650),
			["cs_italy"] = weather_boundary(840),
			["cs_assault"] = weather_boundary(630),
			["workshop/141243798/aim_ag_texture2"] = weather_boundary(1000)
		}
	}, weather_boundary_manager_mt)
end

--- Update current boundary.
--- @return void
function weather_boundary_manager_c:sync()
	local map = globals.mapname()

	if (self.boundaries[map] ~= nil) then
		self.current = self.boundaries[map]
	else
		self.current = self.default
	end
end
--endregion

--region weather_mode_snow
--- @class weather_mode_snow_c : weather_mode_c
--- @field public shader shader_c
--- @field public max_snowflakes number
--- @field public sticky boolean
--- @field public speed number
--- @field public density number
--- @field public radius number
--- @field public texture string
local weather_mode_snow_c = {}
local weather_mode_snow_mt = { __index = weather_mode_snow_c }

--- Instantiate an object of weather_mode_snow_c.
--- @return weather_mode_snow_c
function weather_mode_snow_c.new()
	return setmetatable({
		shader = illusion.shader.rgb(220, 220, 220, 200),
		max_snowflakes = 2048,
		sticky = false,
		speed = 1,
		density = 1,
		radius = 1000,
		texture = renderer.load_png(
			hex_to_bin
			32,
			32
		)
	}, weather_mode_snow_mt)
end




--- Render snow.
--- @param boundary weather_boundary_c
--- @return void
function weather_mode_snow_c:render(boundary)
	if (illusion.hook.total_alive > self.max_snowflakes) then
		illusion.hook:cull()
	end

	if (boundary == nil) then
		return
	end

	local spawn_margin = client.random_int(self.density, 40)

	if (spawn_margin > self.density) then
		return
	end

	for _ = 1, self.density do
		local spawn_vector = illusion.shared.player_camera_position + illusion.vector(
			client.random_float(-self.radius, self.radius),
			client.random_float(-self.radius, self.radius),
			client.random_float(-self.radius, self.radius) / 2
		)

		local sky_vector = illusion.vector(spawn_vector.x, spawn_vector.y, boundary.sky_z)
		local can_spawn_trace = sky_vector:trace_line_to(spawn_vector)

		if (can_spawn_trace == 1) then
			local snowflake = illusion:create()

			local size = client.random_int(8, 22)

			snowflake.origin = spawn_vector
			snowflake.shader = self.shader:clone()
			snowflake.type = "texture"
			snowflake.texture = self.texture
			snowflake.width = size
			snowflake.height = size
			snowflake.fade_time = 2
			snowflake.landed = false
			snowflake.landing_vector = illusion.vector(0, 0, 0)
			snowflake.floating_vector = illusion.vector(0, 0, -0.25)
			snowflake.floating_timer = illusion.timer_tick(true, {
				adjust_after = client.random_int(16, 32)
			})

			local impact_trace_vector = snowflake.origin:clone_offset(0, 0, -32768)
			local floor_trace = snowflake.origin:trace_line_to(impact_trace_vector)

			snowflake.impact_z = snowflake.origin.z - (32768 * floor_trace) + 1
			snowflake.shader.a = 0
			snowflake.target_alpha = 100

			snowflake.on_frame = function()
				if (snowflake.origin.z <= snowflake.impact_z) then
					if (self.sticky == true) then
						local impact_trace_vector = snowflake.origin:clone_offset(0, 0, -32768)
						local floor_trace = snowflake.origin:trace_line_to(impact_trace_vector)

						snowflake.origin.z = snowflake.origin.z - (32768 * floor_trace) + 1
						snowflake.landed = true

						snowflake:kill()
					else
						snowflake:kill()
					end
				end

				snowflake.shader.a = snowflake.shader.a + (snowflake.target_alpha - snowflake.shader.a) * 0.02 * illusion.simulation.delta

				if (snowflake.relation_camera_distance > self.radius) then
					snowflake.fade_time = 0.25

					snowflake:kill()
				end

				if (snowflake.landed == true and snowflake.occluded == true) then
					snowflake.dead = true

					return
				end

				snowflake.floating_timer:event(snowflake.floating_timer.adjust_after, function(timer)
					snowflake.floating_vector(
						client.random_float(-0.1, 0.1),
						client.random_float(-0.1, 0.1),
						client.random_float(-0.33, -0.45)
					)

					timer:restart()
				end)

				if (snowflake.landed == false) then
					snowflake.origin = snowflake.origin + snowflake.floating_vector * self.speed * illusion.simulation.delta
				end
			end
		end
	end
end
--endregion

--region weather_mode_rain
--- @class weather_mode_rain_c
--- @field public shader shader_c
--- @field public max_droplets number
--- @field public splash boolean
--- @field public storm boolean
--- @field public speed number
--- @field public density number
--- @field public radius number
--- @field public texture number
--- @field public sound_indoors string
--- @field public sound_indoors_length number
--- @field public sound_outdoors string
--- @field public sound_outdoors_length number
--- @field public sound_state number
--- @field public sound_timer timer_standard_c
--- @field public storm_timer timer_standard_c
--- @field public storm_interval number
--- @field public storm_sounds table<number, string>
local weather_mode_rain_c = {}
local weather_mode_rain_mt = { __index = weather_mode_rain_c }

--- Instantiate an object of weather_mode_rain_c.
--- @return weather_mode_rain_c
function weather_mode_rain_c.new()
	return setmetatable({
		shader = illusion.shader.rgb(220, 220, 220, 200),
		max_droplets = 2048,
		splash = false,
		storm = false,
		speed = 1,
		density = 1,
		radius = 1000,
		texture = renderer.load_png(
			hex_to_bin
			32, 32
		),
		texture_splash = renderer.load_png(
			hex_to_bin
			64, 64
		),
		sound_indoors = "ambient/weather/aztec_int_rain_lp_01.wav",
		sound_indoors_length = 5,
		sound_outdoors = "ambient/weather/aztec_rain_lp_01.wav",
		sound_outdoors_length = 2,
		sound_state = nil,
		sound_timer = illusion.timer_standard(true),
		storm_timer = illusion.timer_standard(true),
		storm_interval = client.random_int(10, 70),
		storm_sounds = {
			"ambient/weather/thunderstorm/lightning_strike_1.wav",
			"ambient/weather/thunderstorm/lightning_strike_2.wav",
			"ambient/weather/thunderstorm/lightning_strike_3.wav",
			"ambient/weather/thunderstorm/lightning_strike_4.wav",
			"ambient/weather/thunderstorm/thunder_1.wav",
			"ambient/weather/thunderstorm/thunder_2.wav",
			"ambient/weather/thunderstorm/thunder_3.wav",
			"ambient/weather/thunderstorm/thunder_far_away_1.wav",
			"ambient/weather/thunderstorm/thunder_far_away_2.wav",
			"ambient/weather/thunder_distant_03.wav",
			"ambient/weather/thunder_distant_04.wav",
			"ambient/weather/thunder_distant_05.wav",
		}
	}, weather_mode_rain_mt)
end

--- Render rain.
--- @param boundary weather_boundary_c
--- @return void
function weather_mode_rain_c:render(boundary)
	if (illusion.hook.total_alive > self.max_droplets) then
		illusion.hook:cull()
	end

	if (boundary == nil) then
		return
	end

	self.storm_timer:event(self.storm_interval, function()
		self.storm_timer:restart()
		self.storm_interval = client.random_int(10, 70)

		client.exec(string.format("playvol %s 1", self.storm_sounds[client.random_int(1, #self.storm_sounds)]))
	end)

	local sky_pos = illusion.shared.player_origin:clone()

	sky_pos.z = boundary.sky_z

	local sound_state = illusion.shared.player_origin:trace_line_to(sky_pos, illusion.shared.observer_eid) == 1 and 1 or 0
	local force_sound_refresh = false

	if (sound_state ~= self.sound_state) then
		force_sound_refresh = true
	end

	self.sound_state = sound_state

	local sound
	local sound_length

	if (self.sound_state == 0) then
		sound = self.sound_indoors
		sound_length = self.sound_indoors_length
	else
		sound = self.sound_outdoors
		sound_length = self.sound_outdoors_length
	end

	if (force_sound_refresh == true or self.sound_timer:elapsed(sound_length) == true) then
		self.sound_timer:restart()

		client.exec(string.format("play %s", sound))
	end

	local spawn_margin = client.random_int(self.density, 40)

	if (spawn_margin > self.density) then
		return
	end

	for _ = 1, self.density do
		local spawn_vector = illusion.shared.player_camera_position + illusion.vector(
			client.random_float(-self.radius, self.radius),
			client.random_float(-self.radius, self.radius),
			client.random_float(-self.radius, self.radius) / 2
		)

		local sky_vector = illusion.vector(spawn_vector.x, spawn_vector.y, boundary.sky_z)
		local can_spawn_trace = sky_vector:trace_line_to(spawn_vector)

		if (can_spawn_trace == 1) then
			local droplet = illusion:create()

			local size = client.random_int(10, 15)

			droplet.origin = spawn_vector
			droplet.shader = self.shader:clone()
			droplet.type = "texture"
			droplet.texture = self.texture
			droplet.width = size
			droplet.height = size
			droplet.fade_time = 2
			droplet.landed = false
			droplet.landing_vector = illusion.vector(0, 0, 0)
			droplet.floating_vector = illusion.vector(0, 0, -2)
			droplet.floating_timer = illusion.timer_tick(true, {
				adjust_after = client.random_int(16, 32)
			})

			local impact_trace_vector = droplet.origin:clone_offset(0, 0, -32768)
			local floor_trace = droplet.origin:trace_line_to(impact_trace_vector)

			droplet.impact_z = droplet.origin.z - (32768 * floor_trace) + 1
			droplet.shader.a = 0
			droplet.target_alpha = 100

			droplet.on_frame = function()
				if (droplet.origin.z <= droplet.impact_z) then
					if (self.splash == true) then
						droplet.dead = true
						droplet.landed = true

						local impact_trace_vector = droplet.origin:clone_offset(0, 0, -32768)
						local floor_trace = droplet.origin:trace_line_to(impact_trace_vector)
						local splash_pos = droplet.origin:clone()

						splash_pos.z = splash_pos.z - (32768 * floor_trace) + 1

						local sky_pos = splash_pos:clone()

						sky_pos.z = boundary.sky_z

						if (splash_pos:trace_line_to(sky_pos) ~= 1) then
							return
						end

						local width = client.random_int(5, 10)
						local height = client.random_int(5, 15)
						local splash = illusion:create()

						splash.origin = splash_pos
						splash.shader = self.shader:clone()
						splash.shader.a = 100
						splash.type = "texture"
						splash.texture = self.texture_splash
						splash.width = width
						splash.height = height
						splash.on_frame = function()
							splash:kill_invisible()

							splash.shader:fade_out(5 * illusion.simulation.delta)

							splash.origin.z = splash.origin.z + 0.33 * illusion.simulation.delta
							splash.width = splash.width + 8 * illusion.simulation.delta
							splash.height = splash.height + 6 * illusion.simulation.delta
						end
					else
						droplet.dead = true
					end
				end

				droplet.shader.a = droplet.shader.a + (droplet.target_alpha - droplet.shader.a) * 0.06 * illusion.simulation.delta

				if (droplet.relation_camera_distance > self.radius) then
					droplet.fade_time = 0.1

					droplet:kill()
				end

				if (droplet.landed == true and droplet.occluded == true) then
					droplet.dead = true

					return
				end

				droplet.floating_timer:event(droplet.floating_timer.adjust_after, function(timer)
					droplet.floating_vector(
						client.random_float(-0.1, 0.1),
						client.random_float(-0.1, 0.1)
					)

					timer:restart()
				end)

				if (droplet.landed == false) then
					droplet.origin = droplet.origin + droplet.floating_vector * self.speed * illusion.simulation.delta
				end
			end
		end
	end
end
--endregion

--region weather
--- @class weather_c
--- @field public current_mode weather_mode_c
--- @field public boundary_manager weather_boundary_manager_c
--- @field public snow weather_mode_snow_c
local weather_c = {}
local weather_mt = { __index = weather_c }

--- Instantiate an object of weather_c.
--- @return weather_c
function weather_c.new()
	return setmetatable({
		enabled = false,
		current_mode = nil,
		boundary_manager = weather_boundary_manager_c.new(),
		snow = weather_mode_snow_c.new(),
		rain = weather_mode_rain_c.new()
	}, weather_mt)
end

--- Render current weather mode.
--- @return void
function weather_c:render()
	if (self.enabled == false) then
		return
	end

	self.current_mode:render(self.boundary_manager.current)
end
--endregion

--region menu_setup
local menu = menu_manager_c.new("config", "presets")

menu:label("--------------------------------------------------")
menu:label("Havoc Weather - v1.1.2")

local enable_script = menu:checkbox("Enable script")(true)
local weather_mode = menu:combobox("Weather mode", {"none", "snow", "rain"})("snow")
local snow_shader = menu:color_picker("Snow shader", 200, 200, 200, 100)
local snow_sticky = menu:checkbox("Sticky snow")(true)
local snow_speed = menu:slider("Snow speed", 1, 5, {
	default = 2,
	unit = "x"
})

local snow_density = menu:slider("Snow density", 1, 40, {
	default = 15,
	unit = "x"
})

local snow_radius = menu:slider("Snow radius", 5, 25, {
	default = 15,
	scale = 100
})

weather_mode:add_children(
	{
		snow_shader,
		snow_speed,
		snow_sticky,
		snow_density,
		snow_radius
	},
	function()
		return weather_mode() == "snow"
	end
)

local rain_shader = menu:color_picker("Droplet shader", 200, 200, 200, 100)

local rain_splash = menu:checkbox("Droplet splash")(true)

local rain_storm = menu:checkbox("Thunder and lightning")(true)

local rain_speed = menu:slider("Droplet speed", 1, 5, {
	default = 4,
	unit = "x"
})

local rain_density = menu:slider("Droplet density", 1, 50, {
	default = 20,
	unit = "x"
})

local rain_radius = menu:slider("Droplet radius", 5, 25, {
	default = 8,
	scale = 100
})

weather_mode:add_children(
	{
		rain_shader,
		rain_splash,
		rain_storm,
		rain_speed,
		rain_density,
		rain_radius
	},
	function()
		return weather_mode() == "rain"
	end
)

enable_script:add_children({
	weather_mode
})

menu:load_from_db()
--endregion

--region main
local weather = weather_c.new()

if (illusion:available() == true) then
	weather.boundary_manager:sync()
end

client.set_event_callback("level_init", function()
	weather.boundary_manager:sync()
end)

client.set_event_callback("paint", function()
	if (illusion:available() == false) then
		return
	end

	weather:render()
end)

client.set_event_callback("shutdown", function()
	client.exec(string.format("play %s", "bot/null.wav"))
	menu:save_to_db()
end)
--endregion

--region menu_callbacks
enable_script:add_callback(function()
	weather.enabled = enable_script()
	client.exec(string.format("play %s", "bot/null.wav"))
end)

weather_mode:add_callback(function()
	illusion:wipe()
	client.exec(string.format("play %s", "bot/null.wav"))

	if (weather_mode() == "none") then
		weather.enabled = false

		return
	end

	weather.enabled = true
	weather.current_mode = weather[weather_mode()]
end)

snow_shader:add_callback(function()
	local r, g, b, a = snow_shader()

	weather.snow.shader:set_r(r)
	weather.snow.shader:set_g(g)
	weather.snow.shader:set_b(b)
	weather.snow.shader:set_a(a)
end)

snow_sticky:add_callback(function()
	weather.snow.sticky = snow_sticky()
end)

snow_speed:add_callback(function()
	weather.snow.speed = snow_speed()
end)

snow_density:add_callback(function()
	weather.snow.density = snow_density()
end)

snow_radius:add_callback(function()
	weather.snow.radius = snow_radius() * 100
end)

rain_shader:add_callback(function()
	local r, g, b, a = rain_shader()

	weather.rain.shader:set_r(r)
	weather.rain.shader:set_g(g)
	weather.rain.shader:set_b(b)
	weather.rain.shader:set_a(a)
end)

rain_splash:add_callback(function()
	weather.rain.splash = rain_splash()
end)

rain_storm:add_callback(function()
	weather.rain.storm = rain_storm()
end)

rain_speed:add_callback(function()
	weather.rain.speed = rain_speed()
end)

rain_density:add_callback(function()
	weather.rain.density = rain_density()
end)

rain_radius:add_callback(function()
	weather.rain.radius = rain_radius() * 100
end)
--endregion
									client.color_log(0,255,255," [ YDL Loader ]  \0")
									client.color_log(255,255,0,"havoc_vision_weather\0")
									client.color_log(255,255,255," Successful loaded from YDL Server.")

